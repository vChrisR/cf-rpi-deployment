addons:
- exclude:
    jobs:
    - name: smoke_tests
      release: cf-smoke-tests
  include:
    stemcell:
    - os: ubuntu-trusty
  jobs:
  - name: metron_agent
    properties:
      loggregator:
        tls:
          ca_cert: ((loggregator_ca.certificate))
          metron:
            cert: ((loggregator_tls_metron.certificate))
            key: ((loggregator_tls_metron.private_key))
    release: loggregator
  name: metron_agent
instance_groups:
- azs:
  - lab
  instances: 1
  jobs:
  - name: smoke_tests
    properties:
      smoke_tests:
        api: https://api.((system_domain))
        apps_domain: ((system_domain))
        cf_dial_timeout_in_seconds: 300
        org: cf_smoke_tests_org
        password: ((cf_bosh_password))
        skip_ssl_validation: true
        space: cf_smoke_tests_space
        user: bosh
    release: cf-smoke-tests
  lifecycle: errand
  name: smoke-tests
  networks:
  - name: ((network_name))
  stemcell: default
  update:
    serial: true
  vm_type: minimal
- azs:
  - lab
  instances: 1
  jobs:
  - consumes:
      consul_client:
        from: consul_client_link
      consul_common:
        from: consul_common_link
      consul_server:
        from: consul_server_link
    name: consul_agent
    properties:
      consul:
        agent:
          domain: cf.internal
          mode: server
        agent_cert: ((consul_agent.certificate))
        agent_key: ((consul_agent.private_key))
        ca_cert: ((consul_agent_ca.certificate))
        encrypt_keys:
        - ((consul_encrypt_key))
        server_cert: ((consul_server.certificate))
        server_key: ((consul_server.private_key))
    provides:
      consul_client:
        as: consul_client_link
        shared: true
      consul_common:
        as: consul_common_link
        shared: true
      consul_server:
        as: consul_server_link
        shared: true
    release: consul
  name: consul
  networks:
  - name: ((network_name))
  persistent_disk_type: 5GB
  stemcell: default
  update:
    serial: true
  vm_type: minimal
- azs:
  - lab
  instances: 1
  jobs:
  - consumes:
      consul_client:
        from: consul_client_link
      consul_common:
        from: consul_common_link
      consul_server: nil
    name: consul_agent
    release: consul
  - name: nats
    properties:
      nats:
        password: ((nats_password))
        user: nats
    provides:
      nats:
        as: nats
        shared: true
    release: nats
  name: nats
  networks:
  - name: ((network_name))
  stemcell: default
  vm_type: minimal
- azs:
  - lab
  instances: 1
  jobs:
  - consumes:
      consul_client:
        from: consul_client_link
      consul_common:
        from: consul_common_link
      consul_server: nil
    name: consul_agent
    release: consul
  - name: adapter
    properties:
      scalablesyslog:
        adapter:
          logs:
            addr: reverse-log-proxy.service.cf.internal:8082
          tls:
            ca: ((loggregator_ca.certificate))
            cert: ((adapter_tls.certificate))
            cn: ss-adapter
            key: ((adapter_tls.private_key))
        adapter_rlp:
          tls:
            ca: ((loggregator_ca.certificate))
            cert: ((adapter_rlp_tls.certificate))
            cn: reverselogproxy
            key: ((adapter_rlp_tls.private_key))
    release: cf-syslog-drain
  name: adapter
  networks:
  - name: ((network_name))
  stemcell: default
  vm_type: minimal
- azs:
  - lab
  instances: 1
  jobs:
  - consumes:
      consul_client:
        from: consul_client_link
      consul_common:
        from: consul_common_link
      consul_server: nil
    name: consul_agent
    release: consul
  - name: mysql
    properties:
      cf_mysql:
        mysql:
          admin_password: ((cf_mysql_mysql_admin_password))
          binlog_enabled: false
          cluster_health:
            password: ((cf_mysql_mysql_cluster_health_password))
          galera_healthcheck:
            db_password: ((cf_mysql_mysql_galera_healthcheck_password))
            endpoint_password: ((cf_mysql_mysql_galera_healthcheck_endpoint_password))
            endpoint_username: galera_healthcheck
          port: 33306
          seeded_databases:
          - name: cloud_controller
            password: ((cc_database_password))
            username: cloud_controller
          - name: diego
            password: ((diego_database_password))
            username: diego
          - name: network_connectivity
            password: ((network_connectivity_database_password))
            username: network_connectivity
          - name: network_policy
            password: ((network_policy_database_password))
            username: network_policy
          - name: routing-api
            password: ((routing_api_database_password))
            username: routing-api
          - name: uaa
            password: ((uaa_database_password))
            username: uaa
          - name: locket
            password: ((locket_database_password))
            username: locket
    release: cf-mysql
  - name: proxy
    properties:
      cf_mysql:
        proxy:
          api_password: ((cf_mysql_proxy_api_password))
          consul_enabled: true
          consul_service_name: sql-db
    release: cf-mysql
  migrated_from:
  - name: mysql
  - name: singleton-database
  name: database
  networks:
  - name: ((network_name))
  persistent_disk_type: 10GB
  stemcell: default
  update:
    serial: true
  vm_type: small
- azs:
  - lab
  instances: 1
  jobs:
  - consumes:
      consul_client:
        from: consul_client_link
      consul_common:
        from: consul_common_link
      consul_server: nil
    name: consul_agent
    properties:
      consul:
        agent:
          services:
            silk-controller:
              name: silk-controller
    release: consul
  - name: cfdot
    properties:
      tls:
        ca_certificate: ((service_cf_internal_ca.certificate))
        certificate: ((diego_rep_client.certificate))
        private_key: ((diego_rep_client.private_key))
    release: diego
  - name: bbs
    properties:
      diego:
        bbs:
          active_key_label: key-2016-06
          auctioneer:
            ca_cert: ((service_cf_internal_ca.certificate))
            client_cert: ((diego_auctioneer_client.certificate))
            client_key: ((diego_auctioneer_client.private_key))
          ca_cert: ((service_cf_internal_ca.certificate))
          encryption_keys:
          - label: key-2016-06
            passphrase: ((diego_bbs_encryption_keys_passphrase))
          etcd:
            ca_cert: nil
            client_cert: nil
            client_key: nil
            machines: []
          locket:
            api_location: locket.service.cf.internal:8891
          rep:
            ca_cert: ((service_cf_internal_ca.certificate))
            client_cert: ((diego_rep_client.certificate))
            client_key: ((diego_rep_client.private_key))
            require_tls: true
          server_cert: ((diego_bbs_server.certificate))
          server_key: ((diego_bbs_server.private_key))
          sql:
            db_driver: mysql
            db_host: sql-db.service.cf.internal
            db_password: ((diego_database_password))
            db_port: 3306
            db_schema: diego
            db_username: diego
      loggregator:
        ca_cert: ((loggregator_ca.certificate))
        cert: ((loggregator_tls_metron.certificate))
        key: ((loggregator_tls_metron.private_key))
        use_v2_api: true
    release: diego
  - name: silk-controller
    properties:
      cf_networking:
        silk_controller:
          ca_cert: ((silk_ca.certificate))
          database:
            host: sql-db.service.cf.internal
            name: network_connectivity
            password: ((network_connectivity_database_password))
            port: 3306
            type: mysql
            username: network_connectivity
          server_cert: ((silk_controller.certificate))
          server_key: ((silk_controller.private_key))
        silk_daemon:
          ca_cert: ((silk_ca.certificate))
          client_cert: ((silk_daemon.certificate))
          client_key: ((silk_daemon.private_key))
    release: cf-networking
  - name: locket
    properties:
      diego:
        locket:
          sql:
            db_driver: mysql
            db_host: sql-db.service.cf.internal
            db_password: ((locket_database_password))
            db_port: 3306
            db_schema: locket
            db_username: locket
      loggregator:
        ca_cert: ((loggregator_ca.certificate))
        cert: ((loggregator_tls_metron.certificate))
        key: ((loggregator_tls_metron.private_key))
        use_v2_api: true
      tls:
        ca_cert: ((service_cf_internal_ca.certificate))
        cert: ((diego_locket_server.certificate))
        key: ((diego_locket_server.private_key))
    release: diego
  migrated_from:
  - name: diego-bbs
  name: diego-api
  networks:
  - name: ((network_name))
  stemcell: default
  update:
    serial: true
  vm_type: small
- azs:
  - lab
  instances: 1
  jobs:
  - consumes:
      consul_client:
        from: consul_client_link
      consul_common:
        from: consul_common_link
      consul_server: nil
    name: consul_agent
    properties:
      consul:
        agent:
          services:
            uaa: {}
    release: consul
  - name: uaa
    properties:
      login:
        saml:
          activeKeyId: key-1
          keys:
            key-1:
              certificate: ((uaa_login_saml.certificate))
              key: ((uaa_login_saml.private_key))
              passphrase: ""
      uaa:
        admin:
          client_secret: ((uaa_admin_client_secret))
        clients:
          cc-service-dashboards:
            authorities: clients.read,clients.write,clients.admin
            authorized-grant-types: client_credentials
            scope: openid,cloud_controller_service_permissions.read
            secret: ((uaa_clients_cc-service-dashboards_secret))
          cc_routing:
            authorities: routing.router_groups.read
            authorized-grant-types: client_credentials
            secret: ((uaa_clients_cc-routing_secret))
          cc_service_key_client:
            authorities: credhub.read,credhub.write
            authorized-grant-types: client_credentials
            secret: ((uaa_clients_cc_service_key_client_secret))
          cf:
            access-token-validity: 600
            authorities: uaa.none
            authorized-grant-types: password,refresh_token
            override: true
            refresh-token-validity: 2592000
            scope: network.admin,network.write,cloud_controller.read,cloud_controller.write,openid,password.write,cloud_controller.admin,scim.read,scim.write,doppler.firehose,uaa.user,routing.router_groups.read,routing.router_groups.write,cloud_controller.admin_read_only,cloud_controller.global_auditor
            secret: ""
          cloud_controller_username_lookup:
            authorities: scim.userids
            authorized-grant-types: client_credentials
            secret: ((uaa_clients_cloud_controller_username_lookup_secret))
          doppler:
            authorities: uaa.resource
            authorized-grant-types: client_credentials
            override: true
            secret: ((uaa_clients_doppler_secret))
          gorouter:
            authorities: routing.routes.read
            authorized-grant-types: client_credentials
            secret: ((uaa_clients_gorouter_secret))
          network-policy:
            authorities: uaa.resource,cloud_controller.admin_read_only
            authorized-grant-types: client_credentials
            secret: ((uaa_clients_network_policy_secret))
          routing_api_client:
            authorities: routing.routes.write,routing.routes.read,routing.router_groups.read
            authorized-grant-types: client_credentials
            secret: ((uaa_clients_routing_api_client_secret))
          ssh-proxy:
            authorized-grant-types: authorization_code
            autoapprove: true
            override: true
            redirect-uri: https://uaa.((system_domain))/login
            scope: openid,cloud_controller.read,cloud_controller.write
            secret: ((uaa_clients_ssh-proxy_secret))
          tcp_emitter:
            authorities: routing.routes.write,routing.routes.read
            authorized-grant-types: client_credentials
            secret: ((uaa_clients_tcp_emitter_secret))
          tcp_router:
            authorities: routing.routes.read
            authorized-grant-types: client_credentials
            secret: ((uaa_clients_tcp_router_secret))
        jwt:
          policy:
            active_key_id: key-1
            keys:
              key-1:
                signingKey: ((uaa_jwt_signing_key.private_key))
        logging_level: INFO
        scim:
          users:
          - groups:
            - cloud_controller.admin
            - doppler.firehose
            - network.admin
            - openid
            - routing.router_groups.read
            - routing.router_groups.write
            - scim.read
            - scim.write
            name: admin
            password: ((cf_admin_password))
          - groups:
            - cloud_controller.admin
            - doppler.firehose
            - openid
            - routing.router_groups.read
            - routing.router_groups.write
            - scim.read
            - scim.write
            name: bosh
            password: ((cf_bosh_password))
        sslCertificate: ((uaa_ssl.certificate))
        sslPrivateKey: ((uaa_ssl.private_key))
        url: https://uaa.((system_domain))
        zones:
          internal:
            hostnames:
            - uaa.service.cf.internal
      uaadb:
        databases:
        - name: uaa
          tag: uaa
        db_scheme: mysql
        port: 3306
        roles:
        - name: uaa
          password: ((uaa_database_password))
          tag: admin
    release: uaa
  - name: route_registrar
    properties:
      route_registrar:
        routes:
        - health_check:
            name: uaa-healthcheck
            script_path: /var/vcap/jobs/uaa/bin/health_check
          name: uaa
          port: 8080
          registration_interval: 10s
          tags:
            component: uaa
          uris:
          - uaa.((system_domain))
          - '*.uaa.((system_domain))'
          - login.((system_domain))
          - '*.login.((system_domain))'
    release: routing
  - name: statsd_injector
    properties:
      loggregator:
        tls:
          ca_cert: ((loggregator_ca.certificate))
          statsd_injector:
            cert: ((loggregator_tls_statsdinjector.certificate))
            key: ((loggregator_tls_statsdinjector.private_key))
    release: statsd-injector
  name: uaa
  networks:
  - name: ((network_name))
  stemcell: default
  vm_type: minimal
- azs:
  - lab
  instances: 1
  jobs:
  - consumes:
      consul_client:
        from: consul_client_link
      consul_common:
        from: consul_common_link
      consul_server: nil
    name: consul_agent
    properties:
      consul:
        agent:
          services:
            blobstore: {}
    release: consul
  - name: blobstore
    properties:
      blobstore:
        admin_users:
        - password: ((blobstore_admin_users_password))
          username: blobstore-user
        secure_link:
          secret: ((blobstore_secure_link_secret))
        tls:
          cert: ((blobstore_tls.certificate))
          private_key: ((blobstore_tls.private_key))
      system_domain: ((system_domain))
    release: capi
  - name: route_registrar
    properties:
      route_registrar:
        routes:
        - name: blobstore
          port: 8080
          registration_interval: 20s
          tags:
            component: blobstore
          uris:
          - blobstore.((system_domain))
    release: routing
  migrated_from:
  - name: blobstore
  name: singleton-blobstore
  networks:
  - name: ((network_name))
  persistent_disk_type: 100GB
  stemcell: default
  update:
    serial: true
  vm_type: small
- azs:
  - lab
  instances: 1
  jobs:
  - consumes:
      consul_client:
        from: consul_client_link
      consul_common:
        from: consul_common_link
      consul_server: nil
    name: consul_agent
    properties:
      consul:
        agent:
          services:
            cloud_controller_ng: {}
            policy-server-internal:
              name: policy-server
            routing-api: {}
    release: consul
  - name: cloud_controller_ng
    properties:
      app_domains:
      - ((system_domain))
      app_ssh:
        host_key_fingerprint: ((diego_ssh_proxy_host_key.public_key_fingerprint))
      cc:
        buildpacks:
          blobstore_type: webdav
          webdav_config:
            blobstore_timeout: 5
            ca_cert: ((service_cf_internal_ca.certificate))
            password: ((blobstore_admin_users_password))
            private_endpoint: https://blobstore.service.cf.internal:4443
            public_endpoint: https://blobstore.((system_domain))
            username: blobstore-user
        bulk_api_password: ((cc_bulk_api_password))
        db_encryption_key: ((cc_db_encryption_key))
        default_running_security_groups:
        - public_networks
        - dns
        default_staging_security_groups:
        - public_networks
        - dns
        droplets:
          blobstore_type: webdav
          webdav_config:
            blobstore_timeout: 5
            ca_cert: ((service_cf_internal_ca.certificate))
            password: ((blobstore_admin_users_password))
            private_endpoint: https://blobstore.service.cf.internal:4443
            public_endpoint: https://blobstore.((system_domain))
            username: blobstore-user
        install_buildpacks:
        - name: staticfile_buildpack
          package: staticfile-buildpack
        - name: java_buildpack
          package: java-buildpack
        - name: ruby_buildpack
          package: ruby-buildpack
        - name: dotnet_core_buildpack
          package: dotnet-core-buildpack
        - name: nodejs_buildpack
          package: nodejs-buildpack
        - name: go_buildpack
          package: go-buildpack
        - name: python_buildpack
          package: python-buildpack
        - name: php_buildpack
          package: php-buildpack
        - name: binary_buildpack
          package: binary-buildpack
        internal_api_password: ((cc_internal_api_password))
        mutual_tls:
          ca_cert: ((service_cf_internal_ca.certificate))
          private_key: ((cc_tls.private_key))
          public_cert: ((cc_tls.certificate))
        packages:
          blobstore_type: webdav
          webdav_config:
            blobstore_timeout: 5
            ca_cert: ((service_cf_internal_ca.certificate))
            password: ((blobstore_admin_users_password))
            private_endpoint: https://blobstore.service.cf.internal:4443
            public_endpoint: https://blobstore.((system_domain))
            username: blobstore-user
        resource_pool:
          blobstore_type: webdav
          webdav_config:
            blobstore_timeout: 5
            ca_cert: ((service_cf_internal_ca.certificate))
            password: ((blobstore_admin_users_password))
            private_endpoint: https://blobstore.service.cf.internal:4443
            public_endpoint: https://blobstore.((system_domain))
            username: blobstore-user
        security_group_definitions:
        - name: public_networks
          rules:
          - destination: 0.0.0.0-9.255.255.255
            protocol: all
          - destination: 11.0.0.0-169.253.255.255
            protocol: all
          - destination: 169.255.0.0-172.15.255.255
            protocol: all
          - destination: 172.32.0.0-192.167.255.255
            protocol: all
          - destination: 192.169.0.0-255.255.255.255
            protocol: all
        - name: dns
          rules:
          - destination: 0.0.0.0/0
            ports: "53"
            protocol: tcp
          - destination: 0.0.0.0/0
            ports: "53"
            protocol: udp
        stacks:
        - description: Cloud Foundry Linux-based filesystem
          name: cflinuxfs2
        staging_upload_password: ((cc_staging_upload_password))
        staging_upload_user: staging_user
      ccdb:
        databases:
        - name: cloud_controller
          tag: cc
        db_scheme: mysql
        port: 3306
        roles:
        - name: cloud_controller
          password: ((cc_database_password))
          tag: admin
      router:
        route_services_secret: ((router_route_services_secret))
      routing_api:
        enabled: true
      ssl:
        skip_cert_verify: true
      system_domain: ((system_domain))
      uaa:
        ca_cert: ((uaa_ca.certificate))
        clients:
          cc-service-dashboards:
            secret: ((uaa_clients_cc-service-dashboards_secret))
          cc_routing:
            secret: ((uaa_clients_cc-routing_secret))
          cc_service_key_client:
            secret: ((uaa_clients_cc_service_key_client_secret))
          cloud_controller_username_lookup:
            secret: ((uaa_clients_cloud_controller_username_lookup_secret))
        url: https://uaa.((system_domain))
    provides:
      cloud_controller:
        as: cloud_controller
        shared: true
    release: capi
  - name: binary-buildpack
    release: binary-buildpack
  - name: dotnet-core-buildpack
    release: dotnet-core-buildpack
  - name: go-buildpack
    release: go-buildpack
  - name: java-buildpack
    release: java-buildpack
  - name: nodejs-buildpack
    release: nodejs-buildpack
  - name: php-buildpack
    release: php-buildpack
  - name: python-buildpack
    release: python-buildpack
  - name: ruby-buildpack
    release: ruby-buildpack
  - name: staticfile-buildpack
    release: staticfile-buildpack
  - name: route_registrar
    properties:
      route_registrar:
        routes:
        - health_check:
            name: api-health-check
            script_path: /var/vcap/jobs/cloud_controller_ng/bin/cloud_controller_ng_health_check
            timeout: 3s
          name: api
          port: 9022
          registration_interval: 20s
          tags:
            component: CloudController
          uris:
          - api.((system_domain))
        - name: policy-server
          port: 4002
          registration_interval: 20s
          uris:
          - api.((system_domain))/networking
    release: routing
  - name: statsd_injector
    properties:
      loggregator:
        tls:
          ca_cert: ((loggregator_ca.certificate))
          statsd_injector:
            cert: ((loggregator_tls_statsdinjector.certificate))
            key: ((loggregator_tls_statsdinjector.private_key))
    release: statsd-injector
  - name: file_server
    release: diego
  - name: routing-api
    properties:
      routing_api:
        locket:
          api_location: locket.service.cf.internal:8891
          ca_cert: ((service_cf_internal_ca.certificate))
          client_cert: ((diego_locket_client.certificate))
          client_key: ((diego_locket_client.private_key))
        router_groups:
        - name: default-tcp
          reservable_ports: 1024-1123
          type: tcp
        sqldb:
          host: sql-db.service.cf.internal
          password: ((routing_api_database_password))
          port: 3306
          schema: routing-api
          type: mysql
          username: routing-api
        system_domain: ((system_domain))
      uaa:
        ca_cert: ((uaa_ca.certificate))
        tls_port: 8443
    release: routing
  - name: policy-server
    properties:
      cf_networking:
        policy_server:
          database:
            host: sql-db.service.cf.internal
            name: network_policy
            password: ((network_policy_database_password))
            port: 3306
            type: mysql
            username: network_policy
          uaa_ca: ((uaa_ca.certificate))
          uaa_client_secret: ((uaa_clients_network_policy_secret))
    release: cf-networking
  - name: policy-server-internal
    properties:
      cf_networking:
        policy_server_internal:
          ca_cert: ((network_policy_ca.certificate))
          server_cert: ((network_policy_server.certificate))
          server_key: ((network_policy_server.private_key))
    release: cf-networking
  - name: cc_uploader
    properties:
      capi:
        cc_uploader:
          cc:
            ca_cert: ((service_cf_internal_ca.certificate))
            client_cert: ((cc_bridge_cc_uploader.certificate))
            client_key: ((cc_bridge_cc_uploader.private_key))
          mutual_tls:
            ca_cert: ((service_cf_internal_ca.certificate))
            server_cert: ((cc_bridge_cc_uploader_server.certificate))
            server_key: ((cc_bridge_cc_uploader_server.private_key))
    release: capi
  name: api
  networks:
  - name: ((network_name))
  stemcell: default
  ephemeral_disk_type: 50GB
  vm_type: small
- azs:
  - lab
  instances: 1
  jobs:
  - consumes:
      consul_client:
        from: consul_client_link
      consul_common:
        from: consul_common_link
      consul_server: nil
    name: consul_agent
    release: consul
  - name: cloud_controller_worker
    properties:
      cc:
        buildpacks:
          blobstore_type: webdav
          webdav_config:
            blobstore_timeout: 5
            ca_cert: ((service_cf_internal_ca.certificate))
            password: ((blobstore_admin_users_password))
            private_endpoint: https://blobstore.service.cf.internal:4443
            public_endpoint: https://blobstore.((system_domain))
            username: blobstore-user
        db_encryption_key: ((cc_db_encryption_key))
        droplets:
          blobstore_type: webdav
          webdav_config:
            blobstore_timeout: 5
            ca_cert: ((service_cf_internal_ca.certificate))
            password: ((blobstore_admin_users_password))
            private_endpoint: https://blobstore.service.cf.internal:4443
            public_endpoint: https://blobstore.((system_domain))
            username: blobstore-user
        internal_api_password: ((cc_internal_api_password))
        mutual_tls:
          ca_cert: ((service_cf_internal_ca.certificate))
          private_key: ((cc_tls.private_key))
          public_cert: ((cc_tls.certificate))
        packages:
          blobstore_type: webdav
          webdav_config:
            blobstore_timeout: 5
            ca_cert: ((service_cf_internal_ca.certificate))
            password: ((blobstore_admin_users_password))
            private_endpoint: https://blobstore.service.cf.internal:4443
            public_endpoint: https://blobstore.((system_domain))
            username: blobstore-user
        resource_pool:
          blobstore_type: webdav
          webdav_config:
            blobstore_timeout: 5
            ca_cert: ((service_cf_internal_ca.certificate))
            password: ((blobstore_admin_users_password))
            private_endpoint: https://blobstore.service.cf.internal:4443
            public_endpoint: https://blobstore.((system_domain))
            username: blobstore-user
        staging_upload_password: ((cc_staging_upload_password))
        staging_upload_user: staging_user
      ccdb:
        databases:
        - name: cloud_controller
          tag: cc
        db_scheme: mysql
        port: 3306
        roles:
        - name: cloud_controller
          password: ((cc_database_password))
          tag: admin
      routing_api:
        enabled: true
      ssl:
        skip_cert_verify: true
      system_domain: ((system_domain))
      uaa:
        ca_cert: ((uaa_ca.certificate))
        clients:
          cc-service-dashboards:
            secret: ((uaa_clients_cc-service-dashboards_secret))
          cc_routing:
            secret: ((uaa_clients_cc-routing_secret))
    release: capi
  name: cc-worker
  networks:
  - name: ((network_name))
  stemcell: default
  vm_type: minimal
- azs:
  - lab
  instances: 1
  jobs:
  - consumes:
      consul_client:
        from: consul_client_link
      consul_common:
        from: consul_common_link
      consul_server: nil
    name: consul_agent
    properties:
      consul:
        agent:
          services:
            gorouter: {}
    release: consul
  - name: gorouter
    properties:
      router:
        enable_ssl: true
        route_services_secret: ((router_route_services_secret))
        status:
          password: ((router_status_password))
          user: router-status
        tls_pem:
        - cert_chain: ((router_ssl.certificate))
          private_key: ((router_ssl.private_key))
        tracing:
          enable_zipkin: true
      routing_api:
        enabled: true
      uaa:
        ca_cert: ((uaa_ca.certificate))
        clients:
          gorouter:
            secret: ((uaa_clients_gorouter_secret))
        ssl:
          port: 8443
    release: routing
  name: router
  networks:
  - name: ((network_name))
  stemcell: default
  update:
    serial: true
  vm_type: minimal
- azs:
  - lab
  instances: 1
  jobs:
  - consumes:
      consul_client:
        from: consul_client_link
      consul_common:
        from: consul_common_link
      consul_server: nil
    name: consul_agent
    release: consul
  - name: tcp_router
    properties:
      tcp_router:
        oauth_secret: ((uaa_clients_tcp_router_secret))
        router_group: default-tcp
      uaa:
        ca_cert: ((uaa_ca.certificate))
        tls_port: 8443
    release: routing
  name: tcp-router
  networks:
  - name: ((network_name))
  stemcell: default
  vm_type: minimal
- azs:
  - lab
  instances: 1
  jobs:
  - consumes:
      consul_client:
        from: consul_client_link
      consul_common:
        from: consul_common_link
      consul_server: nil
    name: consul_agent
    release: consul
  - name: cfdot
    properties:
      tls:
        ca_certificate: ((service_cf_internal_ca.certificate))
        certificate: ((diego_rep_client.certificate))
        private_key: ((diego_rep_client.private_key))
    release: diego
  - name: auctioneer
    properties:
      diego:
        auctioneer:
          bbs:
            ca_cert: ((service_cf_internal_ca.certificate))
            client_cert: ((diego_bbs_client.certificate))
            client_key: ((diego_bbs_client.private_key))
          ca_cert: ((service_cf_internal_ca.certificate))
          locket:
            api_location: locket.service.cf.internal:8891
          rep:
            ca_cert: ((service_cf_internal_ca.certificate))
            client_cert: ((diego_rep_client.certificate))
            client_key: ((diego_rep_client.private_key))
            require_tls: true
          server_cert: ((diego_auctioneer_server.certificate))
          server_key: ((diego_auctioneer_server.private_key))
      loggregator:
        ca_cert: ((loggregator_ca.certificate))
        cert: ((loggregator_tls_metron.certificate))
        key: ((loggregator_tls_metron.private_key))
        use_v2_api: true
    release: diego
  - name: cloud_controller_clock
    properties:
      cc:
        buildpacks:
          blobstore_type: webdav
          webdav_config:
            blobstore_timeout: 5
            ca_cert: ((service_cf_internal_ca.certificate))
            password: ((blobstore_admin_users_password))
            private_endpoint: https://blobstore.service.cf.internal:4443
            public_endpoint: https://blobstore.((system_domain))
            username: blobstore-user
        db_encryption_key: ((cc_db_encryption_key))
        droplets:
          blobstore_type: webdav
          webdav_config:
            blobstore_timeout: 5
            ca_cert: ((service_cf_internal_ca.certificate))
            password: ((blobstore_admin_users_password))
            private_endpoint: https://blobstore.service.cf.internal:4443
            public_endpoint: https://blobstore.((system_domain))
            username: blobstore-user
        internal_api_password: ((cc_internal_api_password))
        mutual_tls:
          ca_cert: ((service_cf_internal_ca.certificate))
          private_key: ((cc_tls.private_key))
          public_cert: ((cc_tls.certificate))
        packages:
          blobstore_type: webdav
          webdav_config:
            blobstore_timeout: 5
            ca_cert: ((service_cf_internal_ca.certificate))
            password: ((blobstore_admin_users_password))
            private_endpoint: https://blobstore.service.cf.internal:4443
            public_endpoint: https://blobstore.((system_domain))
            username: blobstore-user
        resource_pool:
          blobstore_type: webdav
          webdav_config:
            blobstore_timeout: 5
            ca_cert: ((service_cf_internal_ca.certificate))
            password: ((blobstore_admin_users_password))
            private_endpoint: https://blobstore.service.cf.internal:4443
            public_endpoint: https://blobstore.((system_domain))
            username: blobstore-user
        staging_upload_password: ((cc_staging_upload_password))
        staging_upload_user: staging_user
      ccdb:
        databases:
        - name: cloud_controller
          tag: cc
        db_scheme: mysql
        port: 3306
        roles:
        - name: cloud_controller
          password: ((cc_database_password))
          tag: admin
      routing_api:
        enabled: true
      system_domain: ((system_domain))
      uaa:
        ca_cert: ((uaa_ca.certificate))
        clients:
          cc-service-dashboards:
            secret: ((uaa_clients_cc-service-dashboards_secret))
          cc_routing:
            secret: ((uaa_clients_cc-routing_secret))
        ssl:
          port: 8443
    release: capi
  - name: statsd_injector
    properties:
      loggregator:
        tls:
          ca_cert: ((loggregator_ca.certificate))
          statsd_injector:
            cert: ((loggregator_tls_statsdinjector.certificate))
            key: ((loggregator_tls_statsdinjector.private_key))
    release: statsd-injector
  - name: tps
    properties:
      capi:
        tps:
          bbs:
            ca_cert: ((service_cf_internal_ca.certificate))
            client_cert: ((diego_bbs_client.certificate))
            client_key: ((diego_bbs_client.private_key))
          cc:
            ca_cert: ((service_cf_internal_ca.certificate))
            client_cert: ((cc_bridge_tps.certificate))
            client_key: ((cc_bridge_tps.private_key))
          listener_enabled: false
          watcher:
            locket:
              api_location: locket.service.cf.internal:8891
    release: capi
  - name: ssh_proxy
    properties:
      diego:
        ssh_proxy:
          bbs:
            ca_cert: ((service_cf_internal_ca.certificate))
            client_cert: ((diego_bbs_client.certificate))
            client_key: ((diego_bbs_client.private_key))
          enable_cf_auth: true
          host_key: ((diego_ssh_proxy_host_key.private_key))
          uaa:
            ca_cert: ((uaa_ca.certificate))
            port: 8443
          uaa_secret: ((uaa_clients_ssh-proxy_secret))
      loggregator:
        ca_cert: ((loggregator_ca.certificate))
        cert: ((loggregator_tls_metron.certificate))
        key: ((loggregator_tls_metron.private_key))
        use_v2_api: true
    release: diego
  - name: scheduler
    properties:
      scalablesyslog:
        scheduler:
          api:
            url: https://cloud-controller-ng.service.cf.internal:9023
          tls:
            api:
              ca: ((service_cf_internal_ca.certificate))
              cert: ((scheduler_api_tls.certificate))
              cn: cloud-controller-ng.service.cf.internal
              key: ((scheduler_api_tls.private_key))
            client:
              adapter_cn: ss-adapter
              ca: ((loggregator_ca.certificate))
              cert: ((scheduler_client_tls.certificate))
              key: ((scheduler_client_tls.private_key))
    release: cf-syslog-drain
  migrated_from:
  - name: cc-bridge
  - name: cc-clock
  - name: diego-brain
  name: scheduler
  networks:
  - name: ((network_name))
  stemcell: default
  update:
    serial: true
  vm_type: minimal
- azs:
  - lab
  instances: 1
  jobs:
  - consumes:
      consul_client:
        from: consul_client_link
      consul_common:
        from: consul_common_link
      consul_server: nil
    name: consul_agent
    properties:
      consul:
        agent:
          services:
            doppler:
              name: doppler
    release: consul
  - name: doppler
    properties:
      doppler:
        disable_announce: true
      loggregator:
        disable_syslog_drains: true
        tls:
          ca_cert: ((loggregator_ca.certificate))
          doppler:
            cert: ((loggregator_tls_doppler.certificate))
            key: ((loggregator_tls_doppler.private_key))
    provides:
      doppler:
        as: doppler
        shared: true
    release: loggregator
  name: doppler
  networks:
  - name: ((network_name))
  stemcell: default
  vm_type: minimal
- azs:
  - lab
  instances: 1
  jobs:
  - consumes:
      consul_client:
        from: consul_client_link
      consul_common:
        from: consul_common_link
      consul_server: nil
    name: consul_agent
    properties:
      consul:
        agent:
          node_name_includes_id: true
    release: consul
  - name: cflinuxfs2-rootfs-setup
    release: cflinuxfs2
  - name: garden
    properties:
      garden:
        cleanup_process_dirs_on_wait: true
        debug_listen_address: 127.0.0.1:17019
        default_container_grace_time: 0
        deny_networks:
        - 0.0.0.0/0
        destroy_containers_on_start: true
        graph_cleanup_threshold_in_mb: 0
        network_plugin: /var/vcap/packages/runc-cni/bin/garden-external-networker
        network_plugin_extra_args:
        - --configFile=/var/vcap/jobs/garden-cni/config/adapter.json
        persistent_image_list:
        - /var/vcap/packages/cflinuxfs2/rootfs.tar
    release: garden-runc
  - name: rep
    properties:
      diego:
        rep:
          bbs:
            ca_cert: ((service_cf_internal_ca.certificate))
            client_cert: ((diego_bbs_client.certificate))
            client_key: ((diego_bbs_client.private_key))
          ca_cert: ((service_cf_internal_ca.certificate))
          enable_legacy_api_endpoints: false
          locket:
            api_location: locket.service.cf.internal:8891
          preloaded_rootfses:
          - cflinuxfs2:/var/vcap/packages/cflinuxfs2/rootfs.tar
          require_tls: true
          server_cert: ((diego_rep_agent.certificate))
          server_key: ((diego_rep_agent.private_key))
      loggregator:
        ca_cert: ((loggregator_ca.certificate))
        cert: ((loggregator_tls_metron.certificate))
        key: ((loggregator_tls_metron.private_key))
        use_v2_api: true
      tls:
        ca_cert: ((service_cf_internal_ca.certificate))
        cert: ((diego_rep_agent.certificate))
        key: ((diego_rep_agent.private_key))
    release: diego
  - name: cfdot
    properties:
      tls:
        ca_certificate: ((service_cf_internal_ca.certificate))
        certificate: ((diego_rep_client.certificate))
        private_key: ((diego_rep_client.private_key))
    release: diego
  - name: route_emitter
    properties:
      diego:
        route_emitter:
          bbs:
            ca_cert: ((service_cf_internal_ca.certificate))
            client_cert: ((diego_bbs_client.certificate))
            client_key: ((diego_bbs_client.private_key))
          local_mode: true
      loggregator:
        ca_cert: ((loggregator_ca.certificate))
        cert: ((loggregator_tls_metron.certificate))
        key: ((loggregator_tls_metron.private_key))
        use_v2_api: true
      tcp:
        enabled: true
      uaa:
        ca_cert: ((uaa_ca.certificate))
        client_secret: ((uaa_clients_tcp_emitter_secret))
    release: diego
  - name: garden-cni
    release: cf-networking
  - name: netmon
    release: cf-networking
  - name: vxlan-policy-agent
    properties:
      cf_networking:
        vxlan_policy_agent:
          ca_cert: ((network_policy_ca.certificate))
          client_cert: ((network_policy_client.certificate))
          client_key: ((network_policy_client.private_key))
    release: cf-networking
  - name: silk-daemon
    properties:
      cf_networking:
        silk_daemon:
          ca_cert: ((silk_ca.certificate))
          client_cert: ((silk_daemon.certificate))
          client_key: ((silk_daemon.private_key))
    release: cf-networking
  - name: cni
    release: cf-networking
  name: diego-cell
  networks:
  - name: ((network_name))
  stemcell: default
  ephemeral_disk_type: 100GB  
  vm_type: small-highmem
- azs:
  - lab
  instances: 1
  jobs:
  - consumes:
      consul_client:
        from: consul_client_link
      consul_common:
        from: consul_common_link
      consul_server: nil
    name: consul_agent
    properties:
      consul:
        agent:
          services:
            loggregator_trafficcontroller: {}
            reverse_log_proxy: {}
    release: consul
  - consumes:
      doppler:
        from: doppler
    name: loggregator_trafficcontroller
    properties:
      cc:
        internal_service_hostname: cloud-controller-ng.service.cf.internal
        mutual_tls:
          ca_cert: ((service_cf_internal_ca.certificate))
        tls_port: 9023
      loggregator:
        tls:
          ca_cert: ((loggregator_ca.certificate))
          cc_trafficcontroller:
            cert: ((loggregator_tls_cc_tc.certificate))
            key: ((loggregator_tls_cc_tc.private_key))
          trafficcontroller:
            cert: ((loggregator_tls_tc.certificate))
            key: ((loggregator_tls_tc.private_key))
        uaa:
          client_secret: ((uaa_clients_doppler_secret))
      ssl:
        skip_cert_verify: true
      system_domain: ((system_domain))
      uaa:
        ca_cert: ((uaa_ca.certificate))
        internal_url: https://uaa.service.cf.internal:8443
    release: loggregator
  - name: reverse_log_proxy
    properties:
      loggregator:
        tls:
          ca_cert: ((loggregator_ca.certificate))
          reverse_log_proxy:
            cert: ((loggregator_tls_rlp.certificate))
            key: ((loggregator_tls_rlp.private_key))
    provides:
      reverse_log_proxy:
        as: reverse_log_proxy
        shared: true
    release: loggregator
  - name: route_registrar
    properties:
      route_registrar:
        routes:
        - name: loggregator
          port: 8080
          registration_interval: 20s
          uris:
          - loggregator.((system_domain))
        - name: doppler
          port: 8081
          registration_interval: 20s
          uris:
          - doppler.((system_domain))
          - '*.doppler.((system_domain))'
    release: routing
  name: log-api
  networks:
  - name: ((network_name))
  stemcell: default
  update:
    serial: true
  vm_type: minimal
manifest_version: v1.11.0
name: cf
releases:
- name: binary-buildpack
  sha1: 4dc65769e860095822497f37c4a0c6c1fc2794ec
  url: https://bosh.io/d/github.com/cloudfoundry/binary-buildpack-release?v=1.0.15
  version: 1.0.15
- name: capi
  sha1: e2ef21270e11bdcddcf44803cd680511785851c7
  url: https://bosh.io/d/github.com/cloudfoundry/capi-release?v=1.48.0
  version: 1.48.0
- name: cf-mysql
  sha1: dadf405f2305b6f9b625c1e07bd58aa93caf3cbc
  url: https://bosh.io/d/github.com/cloudfoundry/cf-mysql-release?v=36.10.0
  version: 36.10.0
- name: cf-networking
  sha1: af4770e1c2d62f2fa03aeb48bc66b4da9f846cee
  url: https://bosh.io/d/github.com/cloudfoundry/cf-networking-release?v=1.9.0
  version: 1.9.0
- name: cf-smoke-tests
  sha1: 97179a05f901e5360178cb6cf8e78dcf9de6d2c2
  url: https://bosh.io/d/github.com/cloudfoundry/cf-smoke-tests-release?v=40
  version: "40"
- name: cf-syslog-drain
  sha1: ccc588acc4854d669f60ad1c826d2b366e3548c6
  url: https://bosh.io/d/github.com/cloudfoundry/cf-syslog-drain-release?v=5.1
  version: "5.1"
- name: cflinuxfs2
  sha1: dd38c18449d3119d42ad1ab7bba589e6da9e1a7c
  url: https://bosh.io/d/github.com/cloudfoundry/cflinuxfs2-release?v=1.187.0
  version: 1.187.0
- name: consul
  sha1: 61b429ae13e0fde0ebdb98fce99e08f7baf60a16
  url: https://bosh.io/d/github.com/cloudfoundry-incubator/consul-release?v=191
  version: "191"
- name: diego
  sha1: 899a3437067a0fc9baa45b10fa65002ffbc6e464
  url: https://bosh.io/d/github.com/cloudfoundry/diego-release?v=1.34.0
  version: 1.34.0
- name: dotnet-core-buildpack
  sha1: 90247b8df68bb14cdc829880fbf3be5b390e3277
  url: https://bosh.io/d/github.com/cloudfoundry/dotnet-core-buildpack-release?v=2.0.1
  version: 2.0.1
- name: garden-runc
  sha1: d9a7901c0502d97c043b857496f0f414a5843e8d
  url: https://bosh.io/d/github.com/cloudfoundry/garden-runc-release?v=1.11.1
  version: 1.11.1
- name: go-buildpack
  sha1: 9ba9dcd916ae1618d7220176b578edf5a8e92b0f
  url: https://bosh.io/d/github.com/cloudfoundry/go-buildpack-release?v=1.8.16
  version: 1.8.16
- name: java-buildpack
  sha1: c5ad741533275c1b9ae6a844dda5d0ae14669add
  url: https://bosh.io/d/github.com/cloudfoundry/java-buildpack-release?v=4.8
  version: "4.8"
- name: loggregator
  sha1: 7c5f63c91aa6a4fef0c28e6dae2e15bd9ae52575
  url: https://bosh.io/d/github.com/cloudfoundry/loggregator-release?v=101.5
  version: "101.5"
- name: nats
  sha1: 1300071c7cf43f5d299a6eaec6f6bb6cca7eac3b
  url: https://bosh.io/d/github.com/cloudfoundry/nats-release?v=22
  version: "22"
- name: nodejs-buildpack
  sha1: 9f699d63956fff4fe6dfd8e0f62628b4596dec41
  url: https://bosh.io/d/github.com/cloudfoundry/nodejs-buildpack-release?v=1.6.15
  version: 1.6.15
- name: php-buildpack
  sha1: 76192602e33b77df2822d47f0da10da93071d6ee
  url: https://bosh.io/d/github.com/cloudfoundry/php-buildpack-release?v=4.3.48
  version: 4.3.48
- name: python-buildpack
  sha1: 52287792ded6c70e8ce64f5e6189cc03d07a2feb
  url: https://bosh.io/d/github.com/cloudfoundry/python-buildpack-release?v=1.6.7
  version: 1.6.7
- name: routing
  sha1: 137f568a99949ce97b8f45f7736ad9c6f57f5ecf
  url: https://bosh.io/d/github.com/cloudfoundry-incubator/cf-routing-release?v=0.171.0
  version: 0.171.0
- name: ruby-buildpack
  sha1: e26b5f179473d03091de1fa8c6cab7ddab2edd4f
  url: https://bosh.io/d/github.com/cloudfoundry/ruby-buildpack-release?v=1.7.11
  version: 1.7.11
- name: staticfile-buildpack
  sha1: 0629f6cc368475e914f9219d3f87d78b820c3b00
  url: https://bosh.io/d/github.com/cloudfoundry/staticfile-buildpack-release?v=1.4.21
  version: 1.4.21
- name: statsd-injector
  sha1: 68af4b78775b483cd624c5cc5b5927f94d45ca55
  url: https://bosh.io/d/github.com/cloudfoundry/statsd-injector-release?v=1.1.0
  version: 1.1.0
- name: uaa
  sha1: aa61f0013aa4c42d84cec2fcdac6cf548950011e
  url: https://bosh.io/d/github.com/cloudfoundry/uaa-release?v=54
  version: "54"
stemcells:
- alias: default
  os: ubuntu-trusty
  version: "3468.21"
update:
  canaries: 1
  canary_watch_time: 30000-1200000
  max_in_flight: 1
  serial: false
  update_watch_time: 5000-1200000
variables:
- name: blobstore_admin_users_password
  type: password
- name: blobstore_secure_link_secret
  type: password
- name: cc_bulk_api_password
  type: password
- name: cc_db_encryption_key
  type: password
- name: cc_internal_api_password
  type: password
- name: cc_staging_upload_password
  type: password
- name: cf_mysql_mysql_admin_password
  type: password
- name: cf_mysql_mysql_cluster_health_password
  type: password
- name: cf_mysql_mysql_galera_healthcheck_endpoint_password
  type: password
- name: cf_mysql_mysql_galera_healthcheck_password
  type: password
- name: cf_mysql_proxy_api_password
  type: password
- name: cc_database_password
  type: password
- name: diego_database_password
  type: password
- name: uaa_database_password
  type: password
- name: routing_api_database_password
  type: password
- name: network_policy_database_password
  type: password
- name: network_connectivity_database_password
  type: password
- name: uaa_clients_network_policy_secret
  type: password
- name: silk_ca
  options:
    common_name: silk-ca
    is_ca: true
  type: certificate
- name: silk_controller
  options:
    ca: silk_ca
    common_name: silk-controller.service.cf.internal
    extended_key_usage:
    - server_auth
  type: certificate
- name: silk_daemon
  options:
    ca: silk_ca
    common_name: silk-daemon
    extended_key_usage:
    - client_auth
  type: certificate
- name: network_policy_ca
  options:
    common_name: networkPolicyCA
    is_ca: true
  type: certificate
- name: network_policy_server
  options:
    ca: network_policy_ca
    common_name: policy-server.service.cf.internal
    extended_key_usage:
    - server_auth
  type: certificate
- name: network_policy_client
  options:
    ca: network_policy_ca
    common_name: clientName
    extended_key_usage:
    - client_auth
  type: certificate
- name: uaa_clients_routing_api_client_secret
  type: password
- name: uaa_clients_tcp_emitter_secret
  type: password
- name: nats_password
  type: password
- name: router_status_password
  type: password
- name: cf_admin_password
  type: password
- name: cf_bosh_password
  type: password
- name: router_route_services_secret
  type: password
- name: uaa_admin_client_secret
  type: password
- name: uaa_clients_cc-routing_secret
  type: password
- name: uaa_clients_cc-service-dashboards_secret
  type: password
- name: uaa_clients_cc_service_key_client_secret
  type: password
- name: uaa_clients_cloud_controller_username_lookup_secret
  type: password
- name: uaa_clients_doppler_secret
  type: password
- name: uaa_clients_gorouter_secret
  type: password
- name: uaa_clients_ssh-proxy_secret
  type: password
- name: uaa_clients_tcp_router_secret
  type: password
- name: diego_bbs_encryption_keys_passphrase
  type: password
- name: consul_encrypt_key
  type: password
- name: diego_ssh_proxy_host_key
  type: ssh
- name: uaa_jwt_signing_key
  type: rsa
- name: service_cf_internal_ca
  options:
    common_name: internalCA
    is_ca: true
  type: certificate
- name: blobstore_tls
  options:
    ca: service_cf_internal_ca
    common_name: blobstore.service.cf.internal
  type: certificate
- name: consul_agent_ca
  options:
    common_name: consulCA
    is_ca: true
  type: certificate
- name: consul_agent
  options:
    alternative_names:
    - 127.0.0.1
    ca: consul_agent_ca
    common_name: consul_agent
    extended_key_usage:
    - client_auth
    - server_auth
  type: certificate
- name: consul_server
  options:
    ca: consul_agent_ca
    common_name: server.dc1.cf.internal
    extended_key_usage:
    - client_auth
    - server_auth
  type: certificate
- name: diego_auctioneer_client
  options:
    ca: service_cf_internal_ca
    common_name: auctioneer client
    extended_key_usage:
    - client_auth
  type: certificate
- name: diego_auctioneer_server
  options:
    alternative_names:
    - '*.auctioneer.service.cf.internal'
    - auctioneer.service.cf.internal
    ca: service_cf_internal_ca
    common_name: auctioneer.service.cf.internal
    extended_key_usage:
    - server_auth
  type: certificate
- name: diego_bbs_client
  options:
    ca: service_cf_internal_ca
    common_name: bbs client
    extended_key_usage:
    - client_auth
  type: certificate
- name: diego_bbs_server
  options:
    alternative_names:
    - '*.bbs.service.cf.internal'
    - bbs.service.cf.internal
    ca: service_cf_internal_ca
    common_name: bbs.service.cf.internal
    extended_key_usage:
    - server_auth
    - client_auth
  type: certificate
- name: diego_rep_client
  options:
    ca: service_cf_internal_ca
    common_name: rep client
    extended_key_usage:
    - client_auth
  type: certificate
- name: diego_rep_agent
  options:
    alternative_names:
    - '*.cell.service.cf.internal'
    - cell.service.cf.internal
    - 127.0.0.1
    - localhost
    ca: service_cf_internal_ca
    common_name: cell.service.cf.internal
    extended_key_usage:
    - client_auth
    - server_auth
  type: certificate
- name: loggregator_ca
  options:
    common_name: loggregatorCA
    is_ca: true
  type: certificate
- name: loggregator_tls_statsdinjector
  options:
    ca: loggregator_ca
    common_name: statsdinjector
    extended_key_usage:
    - client_auth
  type: certificate
- name: loggregator_tls_metron
  options:
    ca: loggregator_ca
    common_name: metron
    extended_key_usage:
    - client_auth
    - server_auth
  type: certificate
- name: loggregator_tls_doppler
  options:
    ca: loggregator_ca
    common_name: doppler
    extended_key_usage:
    - client_auth
    - server_auth
  type: certificate
- name: loggregator_tls_tc
  options:
    ca: loggregator_ca
    common_name: trafficcontroller
    extended_key_usage:
    - client_auth
    - server_auth
  type: certificate
- name: loggregator_tls_cc_tc
  options:
    ca: service_cf_internal_ca
    common_name: trafficcontroller
    extended_key_usage:
    - client_auth
  type: certificate
- name: loggregator_tls_rlp
  options:
    ca: loggregator_ca
    common_name: reverselogproxy
    extended_key_usage:
    - client_auth
    - server_auth
  type: certificate
- name: adapter_rlp_tls
  options:
    ca: loggregator_ca
    common_name: ss-adapter-rlp
    extended_key_usage:
    - client_auth
    - server_auth
  type: certificate
- name: scheduler_api_tls
  options:
    ca: service_cf_internal_ca
    common_name: ss-scheduler
    extended_key_usage:
    - client_auth
    - server_auth
  type: certificate
- name: adapter_tls
  options:
    ca: loggregator_ca
    common_name: ss-adapter
    extended_key_usage:
    - server_auth
    - client_auth
  type: certificate
- name: scheduler_client_tls
  options:
    ca: loggregator_ca
    common_name: ss-scheduler
    extended_key_usage:
    - client_auth
  type: certificate
- name: router_ca
  options:
    common_name: routerCA
    is_ca: true
  type: certificate
- name: router_ssl
  options:
    alternative_names:
    - ((system_domain))
    - '*.((system_domain))'
    ca: router_ca
    common_name: routerSSL
  type: certificate
- name: uaa_ca
  options:
    common_name: uaaCA
    is_ca: true
  type: certificate
- name: uaa_ssl
  options:
    alternative_names:
    - uaa.service.cf.internal
    ca: uaa_ca
    common_name: uaa.service.cf.internal
  type: certificate
- name: uaa_login_saml
  options:
    ca: uaa_ca
    common_name: uaa_login_saml
  type: certificate
- name: cc_tls
  options:
    ca: service_cf_internal_ca
    common_name: cloud-controller-ng.service.cf.internal
    extended_key_usage:
    - client_auth
    - server_auth
  type: certificate
- name: cc_bridge_tps
  options:
    ca: service_cf_internal_ca
    common_name: tps_watcher
    extended_key_usage:
    - client_auth
  type: certificate
- name: cc_bridge_cc_uploader
  options:
    ca: service_cf_internal_ca
    common_name: cc_uploader
    extended_key_usage:
    - client_auth
  type: certificate
- name: cc_bridge_cc_uploader_server
  options:
    ca: service_cf_internal_ca
    common_name: cc-uploader.service.cf.internal
    extended_key_usage:
    - server_auth
  type: certificate
- name: diego_locket_server
  options:
    alternative_names:
    - '*.locket.service.cf.internal'
    - locket.service.cf.internal
    ca: service_cf_internal_ca
    common_name: locket.service.cf.internal
    extended_key_usage:
    - server_auth
  type: certificate
- name: diego_locket_client
  options:
    ca: service_cf_internal_ca
    common_name: locket client
    extended_key_usage:
    - client_auth
  type: certificate
- name: locket_database_password
  type: password
